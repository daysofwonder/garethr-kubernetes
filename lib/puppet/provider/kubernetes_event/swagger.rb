
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../../puppet_x/puppetlabs/kubernetes/provider'

Puppet::Type.type(:kubernetes_event).provide(:swagger, :parent => PuppetX::Puppetlabs::Kubernetes::Provider) do

  mk_resource_methods

  def self.instance_to_hash(instance)
    {
      ensure: :present,
      name: instance.metadata.name,
      action: instance.action.respond_to?(:to_hash) ? instance.action.to_hash : instance.action,
      deprecated_count: instance.deprecatedCount.respond_to?(:to_hash) ? instance.deprecatedCount.to_hash : instance.deprecatedCount,
      deprecated_first_timestamp: instance.deprecatedFirstTimestamp.respond_to?(:to_hash) ? instance.deprecatedFirstTimestamp.to_hash : instance.deprecatedFirstTimestamp,
      deprecated_last_timestamp: instance.deprecatedLastTimestamp.respond_to?(:to_hash) ? instance.deprecatedLastTimestamp.to_hash : instance.deprecatedLastTimestamp,
      deprecated_source: instance.deprecatedSource.respond_to?(:to_hash) ? instance.deprecatedSource.to_hash : instance.deprecatedSource,
      event_time: instance.eventTime.respond_to?(:to_hash) ? instance.eventTime.to_hash : instance.eventTime,
      metadata: instance.metadata.respond_to?(:to_hash) ? instance.metadata.to_hash : instance.metadata,
      note: instance.note.respond_to?(:to_hash) ? instance.note.to_hash : instance.note,
      reason: instance.reason.respond_to?(:to_hash) ? instance.reason.to_hash : instance.reason,
      regarding: instance.regarding.respond_to?(:to_hash) ? instance.regarding.to_hash : instance.regarding,
      related: instance.related.respond_to?(:to_hash) ? instance.related.to_hash : instance.related,
      reporting_controller: instance.reportingController.respond_to?(:to_hash) ? instance.reportingController.to_hash : instance.reportingController,
      reporting_instance: instance.reportingInstance.respond_to?(:to_hash) ? instance.reportingInstance.to_hash : instance.reportingInstance,
      series: instance.series.respond_to?(:to_hash) ? instance.series.to_hash : instance.series,
      type: instance.type.respond_to?(:to_hash) ? instance.type.to_hash : instance.type,
      object: instance,
    }
  end

  def create
    Puppet.info("Creating kubernetes_event #{name}")
    create_instance_of('event', name, build_params)
  end

  def flush
   unless @property_hash.empty?
     unless resource[:ensure] == :absent
        flush_instance_of('event', name, @property_hash[:object], build_params)
      end
    end
  end

  def destroy
    Puppet.info("Deleting kubernetes_event #{name}")
    destroy_instance_of('event', name)
    @property_hash[:ensure] = :absent
  end

  private
  def self.list_instances
    list_instances_of('event')
  end

  def build_params
    params = {
      action: resource[:action],
      deprecatedCount: resource[:deprecated_count],
      deprecatedFirstTimestamp: resource[:deprecated_first_timestamp],
      deprecatedLastTimestamp: resource[:deprecated_last_timestamp],
      deprecatedSource: resource[:deprecated_source],
      eventTime: resource[:event_time],
      metadata: resource[:metadata],
      note: resource[:note],
      reason: resource[:reason],
      regarding: resource[:regarding],
      related: resource[:related],
      reportingController: resource[:reporting_controller],
      reportingInstance: resource[:reporting_instance],
      series: resource[:series],
      type: resource[:type],
    }
    params.delete_if { |key, value| value.nil? }
    params
  end
end
