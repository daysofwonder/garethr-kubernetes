require 'puppet/face'
require 'puppet/resource/catalog'
require 'erb'
require 'yaml'

def desymbolize(it)
  case it
  when Symbol
    it.to_s
  when Array
    it.map { |x| desymbolize x }
  when Hash
    result = {}
    it.each do |k, v|
      result[desymbolize(k)] = desymbolize v
    end
    result
  else
    it
  end
end

Puppet::Face.define(:kubernetes, '0.1.0') do
  copyright 'Puppet', 2017
  license   'Apache 2 license'
  summary 'Interact with Kubernetes from the Puppet CLI'
  action :convert do
    summary 'Convert a specified kubernetes YAML file into Puppet'
    description <<-DESC
      The Puppet Kubernetes module allows for managing resources
      (like pods, services and replication controllers) in Kubernetes
      using the Puppet DSL. But you may already have some Kubernetes YAML
      files. This command allows for converting them to Puppet, making
      using the module with existing content easier.
    DESC

    returns 'Puppet code on stdout for use with the Kubernetes module'

    arguments '<file>'

    examples <<-EXAMPLE
      $ puppet kubernetes convert some-kubernetes-config.yaml

      If you would like to create a file you can then run, simply
      redirect the output like so:

      $ puppet kubernetes convert some-kubernetes-config.yaml > config.pp
    EXAMPLE

    when_invoked do |file_name, options|
      raise "#{file_name} does not exist" unless File.file?(file_name)

      YAML.load_stream(File.open(file_name)).map do |data|
        resource_name = data['kind']
                        .gsub(%r{([a-z\d])([A-Z])}, '\1_\2')
                        .downcase

        template = <<-TEMPLATE
kubernetes_<%= resource_name %> { '<%= data['metadata']['name'] %>':
  ensure => present,
  metadata => {
<% data['metadata'].tap { |metadata| metadata.delete('name') }.each do |key, value| %>
    <%= key %> => <% if value.is_a? String %>'<%= value %>'<% else %><%= value.to_s.gsub('"', "'") %><% end %>,
<% end %>
  },
  spec => {
<% data['spec'].each do |key, value| %>
    <%= key %> => <% if value.is_a? String %>'<%= value %>'<% else %><%= value.to_s.gsub('"', "'") %><% end %>,
<% end %>
  },
}
        TEMPLATE

        renderer = ERB.new(template)
        renderer.result(binding).gsub(%r{^$\n}, '')
      end
    end

    when_rendering :console do |return_value, _file, _options|
      return_value
    end
  end

  action :compile do
    default

    summary 'Convert a specified kubernetes YAML file into Puppet'
    description <<-DESC
      The Puppet Kubernetes module allows for managing resources
      (like pods, services and replication controllers) in Kubernetes
      using the Puppet DSL. The compile command will output the YAML
      generated by Puppet, useful for debugging or interacting with other
      tools
    DESC

    returns 'YAML configuration on stdout for use with other Kubernetes tools'

    examples <<-EXAMPLE
      $ puppet kubernetes compile --manifest some-puppet-file.pp
    EXAMPLE

    when_invoked do |_options|
      # We reset the logger to prevent the default performance
      # data being output. Thanks to Felix Frank for this trick.
      if Puppet[:log_level] == 'notice'
        Puppet[:log_level] = 'warning'
        reset_log_level = true
      end
      catalog = Puppet::Face[:catalog, '0.0'].find
      if reset_log_level
        Puppet[:log_level] = 'notice'
      end
      resources = catalog.to_ral.relationship_graph.vertices

      resources.map { |res|
        type, kind = res.type.to_s.split('_', 2)
        next unless type == 'kubernetes'
        resource = res.to_hash
        resource[:metadata][:name] = resource[:name]
        resource.tap do |item|
          [:loglevel, :ensure, :name].each { |k| item.delete k }
        end
        kind = kind.split('_').map(&:capitalize).join
        resource[:kind] = kind
        desymbolize(resource)
      }.compact
    end

    when_rendering :console do |return_value|
      return_value.map do |res|
        res.to_yaml
      end
    end
  end
end
