
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../puppet_x/puppetlabs/swagger/fuzzy_compare'
require_relative '../../puppet_x/puppetlabs/swagger/differ'

Puppet::Type.newtype(:kubernetes_storage_class) do
  
  @doc = "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.

StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name."
  

  ensurable
  
  apply_to_all

    validate do
    required_properties = [
          :provisioner,
        ]
    required_properties.each do |property|
      # We check for both places so as to cover the puppet resource path as well
      if self[property].nil? and self.provider.send(property) == :absent
        fail "You must provide a #{property}"
      end
    end
  end
  
  newparam(:name, namevar: true) do
    desc 'Name of the storage_class.'
  end

  newproperty(:allow_volume_expansion) do
    desc "AllowVolumeExpansion shows whether the storage class allow volume expand"

    def insync?(is)
      PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
    end
    
  end

  newproperty(:allowed_topologies, :array_matching => :all) do
    desc "Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature."

    def insync?(is)
      PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
    end
    
  end

  newproperty(:metadata) do
    desc "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"

    def insync?(is)
      PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
    end
    
    include PuppetX::Puppetlabs::Swagger::Differ
    def change_to_s(current_value, newvalue)
      property_diff_with_hashdiff(current_value, newvalue)
    end
    
  end

  newproperty(:mount_options, :array_matching => :all) do
    desc "Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. ['ro', 'soft']. Not validated - mount of the PVs will simply fail if one is invalid."

    def insync?(is)
      PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
    end
    
  end

  newproperty(:parameters) do
    desc "Parameters holds the parameters for the provisioner that should create volumes of this storage class."

    def insync?(is)
      PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
    end
    
    include PuppetX::Puppetlabs::Swagger::Differ
    def change_to_s(current_value, newvalue)
      property_diff_with_hashdiff(current_value, newvalue)
    end
    
  end

  newproperty(:provisioner) do
    desc "Provisioner indicates the type of the provisioner."

    def insync?(is)
      PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
    end
    
  end

  newproperty(:reclaim_policy) do
    desc "Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete."

    def insync?(is)
      PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
    end
    
  end

  newproperty(:volume_binding_mode) do
    desc "VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature."

    def insync?(is)
      PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
    end
    
  end

end
